#version 450 core

layout (vertices = 1) out;

float LODTessLevel_STEP_METHOD(float distance1, float distance2);
float LODTessLevel_LINEAR_METHOD(float distance1, float distance2);
float LODTessLevel_EXPO_METHOD(float distance1, float distance2);

void calculatePositions();
vec3 projectToPlane(vec3 point, vec3 planePoint, vec3 planeNormal);
vec3 getNormal(vec3 a, vec3 b, vec3 c);

in vec3 worldPos_CS_in[];
in vec3 eye[];
in vec3 normals[];

struct OutputPatch
{
	vec3 worldPos_B030;
	vec3 worldPos_B021;
	vec3 worldPos_B012;
	vec3 worldPos_B003;
	vec3 worldPos_B102;
	vec3 worldPos_B201;
	vec3 worldPos_B300;
	vec3 worldPos_B210;
	vec3 worldPos_B120;
	vec3 worldPos_B111;
	vec3 tc_norms[3];
};

//attributes of the CPs output.
out patch OutputPatch outPatch;


void main()
{
	//loop through tc_norms[3] pass the normals into the OutputPatch.
	for(int i = 0; i < 3; i++)
	{
		outPatch.tc_norms[i] = normals[i];
	}

	//calculate the positions.
	calculatePositions();

	//get distances from camera to vertices.
	float eyeToVertexDist0 = distance(eye[0], worldPos_CS_in[0]);
	float eyeToVertexDist1 = distance(eye[1], worldPos_CS_in[1]);
	float eyeToVertexDist2 = distance(eye[2], worldPos_CS_in[2]); 

	//calculate and set the tessellation levels, using the LOD...() and the distances above.
	gl_TessLevelOuter[0] = LODTessLevel_EXPO_METHOD(eyeToVertexDist1, eyeToVertexDist2); 
    gl_TessLevelOuter[1] = LODTessLevel_EXPO_METHOD(eyeToVertexDist2, eyeToVertexDist0); 
    gl_TessLevelOuter[2] = LODTessLevel_EXPO_METHOD(eyeToVertexDist0, eyeToVertexDist1);
    gl_TessLevelInner[0] = gl_TessLevelOuter[2]; 
}

//function to set distance dependant Level-Of-Detail tessellation level, using Step method.
float LODTessLevel_STEP_METHOD(float distance1, float distance2)
{
	float averageDistance = (distance1 + distance2) * 0.5f;

	if(averageDistance < 2.5)
		return 20;
	else if(averageDistance < 5)
		return 10;
	else if(averageDistance < 10)
		return 5;
	else if(averageDistance < 20)
		return 2.5;
	else
		return 1;
}

//function to set distance dependant Level-Of-Detail tessellation level, using Linear method.
float LODTessLevel_LINEAR_METHOD(float distance1, float distance2)
{
	//var for average Distance, init with the average of the two param distances.
	float averageDistance = (distance1 + distance2) * 0.5f;
	float slope = -0.15f;			//level of slope
	float tessLvl = 1.0f;			//tessellation level to return, initialised to 1.
	float tessLvlMin = 1.0f;		//lowest tessellation level.
	float tessLvlMax = 20.0f;		//highest tessellation level.

	//calculate tessLvl, y = ax + b
	tessLvl = (slope * averageDistance) + tessLvlMax;

	//check tessellation level is neither below the minimum or above the maximum tess levels, if so, then set to min or max.
	if(tessLvl < tessLvlMin)
		tessLvl = tessLvlMin;
	else if(tessLvl > tessLvlMax)
		tessLvl = tessLvlMax;
	
	//return the tessellation level.
	return tessLvl;
}

//function to set distance dependant Level-Of-Detail tessellation level, using Exponential method.
float LODTessLevel_EXPO_METHOD(float distance1, float distance2)
{
//*** x(d) = x0 * (1 + r)d ***
//x(d) == tess lvl value at distance t							//tessLvl
// x0  == initial value at distance=0							//tessLvlMax
// r   == growth rate when r>0 or decay rate when r<, in %.		//slope
// d   == distance in selected distance units.					//averageDistance 

	float averageDistance = (distance1 + distance2) * 0.5f;		//average distance between two eye-2-vertices distances.
	float slope = -0.035f;				//level of slope, aka rate of tessellation decay.
	float tessLvl = 1.0f;				//tessellation level to return, initialised to 1 as minimum level.
	float tessLvlMin = 1.0f;			//lowest tessellation level.
	float tessLvlMax = 50.0f;			//highest tessellation level.

	//calculate tessLvl = x(d) = x0 * (1 + r)d
	tessLvl = exp(tessLvlMax * pow((1 + slope), averageDistance));

	//check tessellation level is neither below the minimum or above the maximum tess levels, if so, then set to min or max.
	if(tessLvl < tessLvlMin)
		tessLvl = tessLvlMin;
	else if(tessLvl > tessLvlMax)
		tessLvl = tessLvlMax;
	
	//return the tessellation level.
	return tessLvl;
}

void calculatePositions()
{
	//original vertices stay exactly the same.
	outPatch.worldPos_B030 = worldPos_CS_in[0];
	outPatch.worldPos_B003 = worldPos_CS_in[1];
	outPatch.worldPos_B300 = worldPos_CS_in[2];

	//edges are named according to the OPPPOSITE vertex.
	vec3 edgeB300 = outPatch.worldPos_B003 - outPatch.worldPos_B030;
	vec3 edgeB030 = outPatch.worldPos_B300 - outPatch.worldPos_B003;
	vec3 edgeB003 = outPatch.worldPos_B030 - outPatch.worldPos_B300;

	//generate the two midpoints on each edge.
	outPatch.worldPos_B021 = outPatch.worldPos_B030 + edgeB300 / 3.0f; 
	outPatch.worldPos_B012 = outPatch.worldPos_B030 + edgeB300 * 2.0f / 3.0f;
	outPatch.worldPos_B102 = outPatch.worldPos_B003 + edgeB030 / 3.0f;
	outPatch.worldPos_B201 = outPatch.worldPos_B003 + edgeB030 * 2.0f / 3.0f;
	outPatch.worldPos_B210 = outPatch.worldPos_B300 + edgeB003 / 3.0f;
	outPatch.worldPos_B120 = outPatch.worldPos_B300 + edgeB003 * 2.0f / 3.0f;

	//project each of the midpoints on the plance, defined by the nearest vertext and its normal.
	outPatch.worldPos_B021 = projectToPlane(outPatch.worldPos_B021, outPatch.worldPos_B030, outPatch.tc_norms[0]);
	outPatch.worldPos_B012 = projectToPlane(outPatch.worldPos_B012, outPatch.worldPos_B003, outPatch.tc_norms[1]);
	outPatch.worldPos_B102 = projectToPlane(outPatch.worldPos_B102, outPatch.worldPos_B003, outPatch.tc_norms[1]);
	outPatch.worldPos_B201 = projectToPlane(outPatch.worldPos_B201, outPatch.worldPos_B300, outPatch.tc_norms[2]);
	outPatch.worldPos_B210 = projectToPlane(outPatch.worldPos_B210, outPatch.worldPos_B300, outPatch.tc_norms[2]);
	outPatch.worldPos_B120 = projectToPlane(outPatch.worldPos_B120, outPatch.worldPos_B030, outPatch.tc_norms[0]);

	//sort out the final centre point of the patch.
	vec3 centre = (outPatch.worldPos_B021 + outPatch.worldPos_B030 + outPatch.worldPos_B300) / 3.0f;
	outPatch.worldPos_B111 = (outPatch.worldPos_B021 + outPatch.worldPos_B012 + outPatch.worldPos_B102 +
								outPatch.worldPos_B210 + outPatch.worldPos_B210 + outPatch.worldPos_B120) / 6.0f;
	outPatch.worldPos_B111 += (outPatch.worldPos_B111 - centre) / 2.0f;
}

vec3 projectToPlane(vec3 point, vec3 planePoint, vec3 planeNormal)
{
	vec3 v = point - planePoint;
	float len = dot(v, planeNormal);
	vec3 d = len * planeNormal;

	vec3 result = point - d;

	return result;
}

vec3 getNormal(vec3 a, vec3 b, vec3 c)
{
	vec3 e1 = vec3(b - a);
	vec3 e2 = vec3(c - a);
	return normalize(cross(e1, e2));
}