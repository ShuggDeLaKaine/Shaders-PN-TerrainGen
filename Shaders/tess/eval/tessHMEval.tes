#version 450 core

//reading in a triangle, split tesselated triangels evenly in a counter-clockwise direction (ccw).
//layout (triangles, equal_spacing, ccw) in;					//TESTING - unhappy with bumping transitions in LOD as moving, not great.
layout (triangles, fractional_even_spacing, ccw) in;			//TESTING - much smoother transitions in LOD as moving.
//layout (triangles, fractional_odd_spacing, ccw) in;			//TESTING - smoother transitions in LOD as moving BUT final feel more hard edged and low poly

//forward declare functions to perfrom interpolation with the barycentric coordinates from the Primitive Generator.
vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2);
vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2);

//uniform matrices to perform transformations, previously this would have been done in vertex shader.
uniform mat4 view;
uniform mat4 projection;
uniform vec3 viewPos;

uniform sampler2D heightMap;
uniform int scale;
uniform bool useFog;

in vec3 posTCS[];
in vec2 texCoordsTCS[];

out vec3 posTES;
out vec2 tessTexTES;
out vec3 normalsTES;
out float visibilityTES;


void main()
{
	posTES = interpolate3D(posTCS[0], posTCS[1], posTCS[2]);
	tessTexTES = interpolate2D(texCoordsTCS[0], texCoordsTCS[1], texCoordsTCS[2]);

	float height = (texture(heightMap, tessTexTES).r);		//texture() returns float in the values [-1,1] which will need scaling.
	posTES.y = height * scale;

	float right = (textureOffset(heightMap, tessTexTES, ivec2(1,0)).r) * scale;		//textureOffset() similar to texture(), this offsets the heightMap and tessTex coords with the ivec2(1,0)
	float left = (textureOffset(heightMap, tessTexTES, ivec2(-1,0)).r) * scale;	
	float up    = (textureOffset(heightMap, tessTexTES, ivec2(0,1)).r) * scale;	
	float down = (textureOffset(heightMap, tessTexTES, ivec2(0,-1)).r) * scale;	

	float lr = left - right;
	float ud = up - down;
	normalsTES = normalize(vec3(lr, 2.0, ud));

	//set positions in the world space.
	gl_Position = projection * view * vec4(posTES, 1.0f);

	//applying the fog stuff
	if(useFog)
	{
		float cameraDistance = distance(viewPos, posTES.xyz);

		float fogDensity = 0.005f;
		float fogGradient = 0.45f;

		visibilityTES = exp(-pow((cameraDistance * fogDensity), fogGradient));
		visibilityTES = clamp(visibilityTES, 0.0f, 1.0f);
	}
}

//basic 2D linear interpolation (aka lerp). 
vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2)
{
   	return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2;
}

//basic 3D linear interpolation(aka lerp). 
vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2)
{
   	return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;
}