#version 450 core

//reading in a triangle, split tesselated triangels evenly in a counter-clockwise direction (ccw).
//layout (triangles, equal_spacing, ccw) in;					//TESTING - unhappy with bumping transitions in LOD as moving, not great.
layout (triangles, fractional_even_spacing, ccw) in;			//TESTING - much smoother transitions in LOD as moving.
//layout (triangles, fractional_odd_spacing, ccw) in;			//TESTING - smoother transitions in LOD as moving BUT final feel more hard edged and low poly

//forward declare functions to perfrom interpolation with the barycentric coordinates from the Primitive Generator.
vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2);
vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2);

float hash(float n);
float snoise(vec3 x);
float noise(vec3 position, int numOctaves);

//uniform matrices to perform transformations, previously this would have been done in vertex shader.
uniform mat4 view;
uniform mat4 projection;
uniform vec3 viewPos;
uniform int scale;
uniform int octaves;

uniform bool useFog;
uniform bool perlinOnGPU;

in vec3 posTCS[];
in vec2 texCoordsTCS[];
//in vec4 fragPosLightSpaceTCS[];

out vec3 posTES;
out vec2 tessTexTES;
out vec3 normalsTES;
out float visibilityTES;
//out vec4 fragPosLightSpaceTES;


void main()
{
	posTES = interpolate3D(posTCS[0], posTCS[1], posTCS[2]);
	tessTexTES = interpolate2D(texCoordsTCS[0], texCoordsTCS[1], texCoordsTCS[2]);
	//fragPosLightSpaceTES = interpolate3D(fragPosLightSpaceTCS[0], fragPosLightSpaceTCS[1], fragPosLightSpaceTCS[2]);

	if(perlinOnGPU)
	{
		//Perlin Noise on the GPU (ie, this code here.)
		//working out the normals for perlin noise; get the positions of right, left, up and down.
		vec3 right = vec3(posTES.x + 1, posTES.y, posTES.z);
		vec3 left = vec3(posTES.x - 1, posTES.y, posTES.z);
		vec3 up   = vec3(posTES.x, posTES.y, posTES.z + 1);
		vec3 down = vec3(posTES.x, posTES.y, posTES.z - 1);
		
		//now apply perlin noise to right, left, up and down.
		float r = noise(right, octaves);
		float l = noise(left, octaves);
		float u = noise(up, octaves);
		float d = noise(down, octaves);
		
		//then the left-to-right and up-to-down.
		float lr = l - r;
		float ud = u - d;

		//normalise it.
		normalsTES = normalize(vec3((lr), 2.0, (ud)));

		//set the .y positions, this time using the perlin noise.
		posTES.y = noise(posTES, octaves) * scale;		
	}
	else		//Perlin Noise on the CPU.
	{
		//working out the normals for perlin noise; get the positions of right, left, up and down.
		vec3 right = vec3(posTES.x + 1, posTES.y, posTES.z) * scale;
		vec3 left  = vec3(posTES.x - 1, posTES.y, posTES.z) * scale;
		vec3 up    = vec3(posTES.x, posTES.y, posTES.z + 1) * scale;
		vec3 down  = vec3(posTES.x, posTES.y, posTES.z - 1) * scale;

		//then work out the left-to-right and up-to-down.
		float lr = left.x - right.x;
		float ud = up.z - down.z;

		//normalise it.
		normalsTES = normalize(vec3(lr, 2.0, ud));		

		//set the .y of vert positions, times-ed by the scale.
		posTES.y = posTES.y * scale;			
	}

	//set positions in the world space.
	gl_Position = projection * view * vec4(posTES, 1.0f);

	//applying the fog stuff
	if(useFog)
	{
		float cameraDistance = distance(viewPos, posTES.xyz);

		float fogDensity = 0.002f;
		float fogGradient = 1.0f;

		visibilityTES = exp(-pow((cameraDistance * fogDensity), fogGradient));
		visibilityTES = clamp(visibilityTES, 0.0f, 1.0f);
	}
}

//basic 2D linear interpolation (aka lerp). 
vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2)
{
   	return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2;
}

//basic 3D linear interpolation(aka lerp). 
vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2)
{
   	return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;
}

float hash(float n) 
{
    return fract(sin(n) * 753.5453123);
}

float snoise(vec3 x)
{
	vec3 p = floor(x);
	vec3 f = fract(x);
	f = f * f * (3.0f - (2.0f * f));

	float n = p.x + p.y * 157.0f + 113.0f * p.z;
	return  mix(mix(mix(hash(n + 0.0f), hash(n + 1.0f), f.x),
			mix(hash(n + 157.0f), hash(n + 158.0f), f.x), f.y),
			mix(mix(hash(n + 113.0f), hash(n + 114.0f), f.x),
			mix(hash(n + 270.0f), hash(n + 271.0f), f.x), f.y), f.z);
}

float noise(vec3 position, int numOctaves)
{
	float total = 0.0f;
	float maxAmplitude = 0.0f;

	float amplitude = 100.0f;
	float frequency = 0.005f;

	for (int i = 0; i < numOctaves; i++)
	{
		total += snoise(position * frequency) * amplitude;
		maxAmplitude += amplitude;

		frequency *= 2;
		amplitude /= 2;
	}
	return (total / maxAmplitude);
}